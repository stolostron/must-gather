#! /bin/bash
# Copyright (c) 2023 Red Hat, Inc.
# Copyright Contributors to the Open Cluster Management project

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
source ${SCRIPT_DIR}/gather_utils

gather_spoke() {
  # collect CRDs to aid automated must-gather readers
  log "Gathering spoke information for MCE"
  run_inspect customresourcedefinition.apiextensions.k8s.io

  run_inspect klusterlets.operator.open-cluster-management.io --all-namespaces
  run_inspect clusterclaims.cluster.open-cluster-management.io --all-namespaces
  run_inspect appliedmanifestworks.work.open-cluster-management.io --all-namespaces

  KLUSTERLETS_NAMES=$(oc get klusterlets.operator.open-cluster-management.io -o name)
  for name in ${KLUSTERLETS_NAMES}; do
    local agent_namespace
    local mode
    mode=$(oc get "$name" -o jsonpath='{.spec.deployOption.mode}')
    log "klusterlet $name is deployed in $mode mode"
    if [ "$mode" = 'Hosted' ] || [ "$mode" = 'SingletonHosted' ]; then
      agent_namespace=$name
    else
      agent_namespace=$(oc get "$name" -o jsonpath='{.spec.namespace}')
    fi

    log "klusterlet name: $name, agent namespace: $agent_namespace"
    run_inspect ns/"$agent_namespace"
  done

  # gather all the customized addon namespaces
  run_inspect ns/"open-cluster-management-agent-addon"
  CUSTOMIZED_ADDON_NAMESPACES=$(oc get ns -l addon.open-cluster-management.io/namespace=true --no-headers=true -o custom-columns="NAME:.metadata.name")
  for addon_namespace in ${CUSTOMIZED_ADDON_NAMESPACES}; do
    run_inspect ns/"$addon_namespace"
  done

  run_inspect ns/openshift-operators # gatekeeper and volsync operator will be installed in this ns in production
}

log "Starting Managed cluster must-gather"
gather_spoke

if oc get crd policies.policy.open-cluster-management.io &>/dev/null; then
  log "Gathering spoke information for ACM"
  # application resources on managed cluster
  run_inspect subscriptions.apps.open-cluster-management.io --all-namespaces
  run_inspect helmreleases.apps.open-cluster-management.io --all-namespaces
  run_inspect subscriptionstatus.apps.open-cluster-management.io --all-namespaces

  run_inspect workmanagers.agent.open-cluster-management.io --all-namespaces
  run_inspect applicationmanagers.agent.open-cluster-management.io --all-namespaces
  run_inspect certpolicycontrollers.agent.open-cluster-management.io --all-namespaces
  run_inspect iampolicycontrollers.agent.open-cluster-management.io --all-namespaces
  run_inspect policycontrollers.agent.open-cluster-management.io --all-namespaces
  run_inspect searchcollectors.agent.open-cluster-management.io --all-namespaces

  run_inspect policies.policy.open-cluster-management.io --all-namespaces
  run_inspect certificatepolicies.policy.open-cluster-management.io --all-namespaces
  run_inspect iampolicies.policy.open-cluster-management.io --all-namespaces
  # ref: https://github.com/openshift/oc/pull/1550/files#diff-6f6b5698b5c7ebfc01c64967180a4d2e5f2f248509dae99f7d0d07e13018c366
  log "ConfigurationPolicies throw error 'the server doesn't have a resource type ', which can be ignored."
  run_inspect configurationpolicies.policy.open-cluster-management.io --all-namespaces
  run_inspect operatorpolicies.policy.open-cluster-management.io --all-namespaces

  run_inspect ns/open-cluster-management-addon-observability

  # VolSync CRs
  run_inspect replicationdestinations.volsync.backube --all-namespaces
  run_inspect replicationsources.volsync.backube --all-namespaces

  run_inspect ns/openshift-operators # gatekeeper and volsync operator will be installed in this ns in production
  run_inspect ns/openshift-gatekeeper-system
  run_inspect ns/openshift-gatekeeper-operator

  # Submariner logs
  run_inspect ns/submariner-operator

  # Get disconnected information
  run_inspect imagecontentsourcepolicies.operator.openshift.io --all-namespaces

  # Version info
  run_inspect clusterversions
fi
